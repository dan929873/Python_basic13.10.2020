# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
#
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
#
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    def __init__(self, cell_count):
        self.cell_c = cell_count

    def __add__(self, other):
        return Cell(self.cell_c + other.cell_c)

    def __sub__(self, other):
        n_cell = self.cell_c - other.cell_c
        if n_cell > 0:
            return n_cell
        raise ValueError('Разность данных клеток меньше нуля')

    def __mul__(self, other):
        return Cell(self.cell_c * other.cell_c)

    def __truediv__(self, other):
        return Cell(self.cell_c // other.cell_c)

    def make_order(self, number: int):
        if type(number) != int:
            raise TypeError('Передано не число')
        row = self.cell_c // number
        row_rem = self.cell_c % number

        for el in range(row+1):
            if el == row and row_rem > 0:
                for rem in range(row_rem):
                    print('*', end='')
                else: print('')
            else:
                for i in range(number):
                    print('*', end='')
                else: print('')

c1 = Cell(13)
c2 = Cell(2)
c1.make_order(2)

